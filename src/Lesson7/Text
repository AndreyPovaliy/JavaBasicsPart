/*
* S single responsibility
* O open-closed
* L Liskov substitution
* I interface segregation
* D dependency inversion
*
* SRP - разделение по классам логики, с определенной ответственностью для какждого класса
* OCP - открыт для расширения, закрыт для изменения
* LSP - классы наследники должны заменять родителя. Лучше использовать один интерфейс, чем наследовать один от другого
* ISP - разделить интерфейсы, чтобы не получать ненужные методы
* DIP - модули высших уровней не должны зависеть от модулей низших уровней, но оба зависеть от абстракций. Все зависимости инкапсулировать в отдельные сущности
* */


Nested classes (вложенный класс)
    *Inner Class (внутренний)
        _inner class (обычный внутренний класс)
        _method-local inner class (локальный вк)
        _anonymous Inner Class (анонимный вк)
    *Static nested classes (статический вложенный класс)